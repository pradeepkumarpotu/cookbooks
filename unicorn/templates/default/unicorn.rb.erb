##
# Unicorn config at <%= @name %>
# Managed by Chef - Local Changes will be Nuked from Orbit (just to be sure)
##

# What ports/sockets to listen on, and what options for them.
<%- @listen.each do |port, options| %>
listen "/var/run/unicorn/rails_app.sock", :tcp_nodelay => true, :backlog => 100 
<%- end %>

<%- if @working_directory %>
working_directory '/var/www/projects/rails_app/current'
<%- end %>

# What the timeout for killing busy workers is, in seconds
timeout 30

# Whether the app should be pre-loaded
preload_app true

# How many worker processes
worker_processes 8

<%- if @unicorn_command_line %>
Unicorn::HttpServer::START_CTX[0] = "<%= @unicorn_command_line %>"
<%- end %>

<%- if @forked_user %>
# Run forked children as specified user/group
user "deploy", "deploy" unless @forked_group.nil? %>
<%- end %>

<%- if @before_exec %>
# What to do right before exec()-ing the new unicorn binary
before_exec do |server|
  <%= @before_exec %>
end

<%- end %>

<%- if @before_fork %>
# What to do before we fork a worker
before_fork do |server, worker|
  sleep 1
end

<%- end %>
<%- if @after_fork %>
# What to do after we fork a worker
after_fork do |server, worker|
  <%= @after_fork %>
end

<%- end %>
<%- if @pid %>
# Where to drop a pidfile
pid '<%= @pid %>'

<%- end %>
<%- if @stderr_path %>
# Where stderr gets logged
stderr_path '<%= @stderr_path %>'

<%- end %>
<%- if @stdout_path %>
# Where stdout gets logged
stdout_path '<%= @stdout_path %>'

<%- end %>
<%- if @copy_on_write %>
# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

<%- end %>
<%- if @enable_stats %>
# https://newrelic.com/docs/ruby/ruby-gc-instrumentation
if GC.respond_to?(:enable_stats)
  GC.enable_stats
end
if defined?(GC::Profiler) and GC::Profiler.respond_to?(:enable)
  GC::Profiler.enable
end

<%- end %>

